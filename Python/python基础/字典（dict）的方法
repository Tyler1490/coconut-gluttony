1、方法返回值类型总结:
方法	返回值类型	说明
clear()	None	删除字典所有项。
copy()	dict	返回字典的浅拷贝。
fromkeys()	dict	返回一个新字典，键来自指定的序列。
get()	Any	返回指定键的值，如果键不存在，返回 default。
items()	dict_items ([('a', 1), ('b', 2)]) 返回字典的所有键值对（可迭代对象）。
keys()	dict_keys	(['a', 'b']) 返回字典的所有键（可迭代对象）。
pop()	Any	移除并返回指定键的值。
popitem()	tuple	{'a': 1} 移除并返回一个键值对（元组）。
setdefault()	Any	返回指定键的值，如果键不存在则添加并返回。
update()	None	更新字典。
values()	dict_values	([1, 2]) 返回字典的所有值（可迭代对象）。
__contains__(key) 或 key in dict   bool  检查字典中是否存在指定的键。返回 True 如果键存在，返回 False 否则。
__getitem__(key) 或 dict[key] Any  根据指定的键返回对应的值。如果键不存在，则抛出 KeyError。
2、为什么一些方法返回视图对象而不是普通的列表/元组？
节省内存：返回视图对象（如 dict_keys, dict_values, dict_items）避免了创建数据副本。这种设计节省了内存，因为你不需要在每次调用方法时都复制字典的数据结构。
动态更新：视图对象始终反映字典的当前状态。如果字典的内容发生变化，返回的视图对象也会立即更新。例如，删除字典中的键或修改键值，视图对象也会反映出新的内容。
性能优化：通过返回视图对象，Python 可以避免不必要的数据复制，从而提高性能，特别是在处理大字典时。每次访问 items()、keys() 或 values() 时不需要生成完整的列表，而是通过视图动态访问字典数据。
